networks:
  pingerus-net:

volumes:
  pgdata:
  prom-data:
  loki-data:
  tempo-data:


services:
  frontend:
    image: ghcr.io/nordcoder-portfolio/pingerus/migrator:${TAG}
    build:
      context: ./frontend
      dockerfile: Dockerfile
    environment:
      API_BASE:
#    depends_on:
#      api-gateway:
#        condition: service_healthy
    networks: [ pingerus-net ]
    ports:
      - "80:80"
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost/" ]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: pingerus
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [ pingerus-net ]
    ports: [ "5432:5432" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d pingerus" ]
      interval: 5s
      timeout: 3s
      retries: 20

  kafka:
    image: bitnami/kafka:3.8
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuvwx"
      KAFKA_HEAP_OPTS: -Xms128m -Xmx256m
    networks: [ pingerus-net ]
    ports: [ "9092:9092" ]
    healthcheck:
      test: [ "CMD-SHELL", "unset KAFKA_OPTS; /opt/bitnami/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1" ]
      interval: 10s
      timeout: 5s
      retries: 20

  mailhog:
    image: mailhog/mailhog:latest
    networks: [ pingerus-net ]
    ports: [ "1025:1025","8025:8025" ]

  migrator:
    image: ghcr.io/nordcoder-portfolio/pingerus/migrator:${TAG}
    environment:
      DB_DSN: "${DB_DSN}"
    networks: [ pingerus-net ]
    depends_on:
      db: { condition: service_healthy }
    restart: "no"

  api-gateway:
    image: ghcr.io/nordcoder-portfolio/pingerus/api-gateway:${TAG}
    env_file: /etc/pingerus/pingerus.env
    environment:
      DB_DSN: "${DB_DSN}"
      JWT_SECRET: "${JWT_SECRET}"
      SMTP_USER: "${SMTP_USER}"
      SMTP_PASSWORD: "${SMTP_PASSWORD}"
    networks: [ pingerus-net ]
    depends_on:
      db: { condition: service_healthy }
      kafka: { condition: service_started }
      migrator: { condition: service_completed_successfully }
    ports: [ "8080:8080","9090:9090" ]
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8080/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 10

  scheduler:
    image: ghcr.io/nordcoder-portfolio/pingerus/scheduler:${TAG}
    env_file: /etc/pingerus/pingerus.env
    networks: [ pingerus-net ]
    depends_on:
      db: { condition: service_healthy }
      kafka: { condition: service_started }
      migrator: { condition: service_completed_successfully }
    ports: [ "8082:8082" ]
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8082/healthz" ]
      interval: 5s
      timeout: 3s
      retries: 10

  ping-worker:
    image: ghcr.io/nordcoder-portfolio/pingerus/ping-worker:${TAG}
    env_file: /etc/pingerus/pingerus.env
    networks: [ pingerus-net ]
    depends_on:
      db: { condition: service_healthy }
      kafka: { condition: service_started }
      migrator: { condition: service_completed_successfully }
    ports: [ "8083:8083" ]
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8083/healthz" ]
      interval: 5s
      timeout: 3s
      retries: 10

  email-notifier:
    image: ghcr.io/nordcoder-portfolio/pingerus/email-notifier:${TAG}
    env_file: /etc/pingerus/pingerus.env
    networks: [ pingerus-net ]
    depends_on:
      db: { condition: service_healthy }
      kafka: { condition: service_started }
      mailhog: { condition: service_started }
      migrator: { condition: service_completed_successfully }
    ports: [ "8084:8084" ]
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8084/healthz" ]
      interval: 5s
      timeout: 3s
      retries: 10


  otel-collector:
    image: otel/opentelemetry-collector-contrib:0.109.0
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    volumes:
      - ${CONFIG_DIR}/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
    ports:
      - "4317:4317"
      - "4318:4318"
    networks: [ pingerus-net ]

  tempo:
    image: grafana/tempo:2.5.0
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ${CONFIG_DIR}/tempo.yaml:/etc/tempo.yaml:ro
      - tempo-data:/var/tempo
    ports:
      - "3200:3200"
    networks: [ pingerus-net ]

  loki:
    image: grafana/loki:2.9.3
    command: [ "-config.file=/etc/loki/local-config.yaml" ]
    volumes:
      - ${CONFIG_DIR}/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    ports:
      - "3100:3100"
    networks: [ pingerus-net ]

  promtail:
    image: grafana/promtail:2.9.3
    command: [ "-config.file=/etc/promtail/config.yaml" ]
    volumes:
      - ${CONFIG_DIR}/promtail.yaml:/etc/promtail/config.yaml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [ pingerus-net ]
    depends_on:
      loki:
        condition: service_started

  prometheus:
    image: prom/prometheus:v2.53.1
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=15d
      - --web.enable-lifecycle
    volumes:
      - ${CONFIG_DIR}/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom-data:/prometheus
    ports:
      - "9091:9091"
    networks: [ pingerus-net ]

  grafana:
    image: grafana/grafana:10.4.3
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ${CONFIG_DIR}/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
    ports:
      - "3000:3000"
    networks: [ pingerus-net ]
    depends_on:
      prometheus:
        condition: service_started
      loki:
        condition: service_started
      tempo:
        condition: service_started
