version: "3.9"

networks:
  pingerus-net:

volumes:
  pgdata:
  prom-data:
  loki-data:
  tempo-data:

x-env-secrets: &env_secrets
  DB_DSN: "${DB_DSN}"
  JWT_SECRET: "${JWT_SECRET}"
  SMTP_USER: "${SMTP_USER}"
  SMTP_PASSWORD: "${SMTP_PASSWORD}"

services:
  http-echo:
    image: mendhak/http-https-echo:32
    networks: [ pingerus-net ]
    environment:
      - HTTP_PORT=80
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:80/" ]
      interval: 5s
      timeout: 3s
      retries: 20

  db:
    image: postgres:16
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: secret
      POSTGRES_DB: pingerus
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks: [ pingerus-net ]
    ports:
      - "5432:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d pingerus" ]
      interval: 5s
      timeout: 3s
      retries: 20

  kafka:
    image: bitnami/kafka:3.8
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "true"
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_KRAFT_CLUSTER_ID: "abcdefghijklmnopqrstuvwx"
    networks: [ pingerus-net ]
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD-SHELL", "unset KAFKA_OPTS; /opt/bitnami/kafka/bin/kafka-broker-api-versions.sh --bootstrap-server localhost:9092 >/dev/null 2>&1" ]
      interval: 10s
      timeout: 5s
      retries: 20

  mailhog:
    image: mailhog/mailhog:latest
    networks: [ pingerus-net ]
    ports:
      - "1025:1025"
      - "8025:8025"

otel-collector:
  image: otel/opentelemetry-collector-contrib:0.109.0
  command: ["--config=/etc/otel-collector-config.yaml"]
  volumes:
    - ./deploy/otel-collector-config.yaml:/etc/otel-collector-config.yaml:ro
  ports: ["4317:4317","4318:4318"]
  networks: [pingerus-net]

  tempo:
    image: grafana/tempo:latest
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./deploy/tempo.yaml:/etc/tempo.yaml:ro
      - tempo-data:/var/tempo
    ports: ["3200:3200"]
    networks: [pingerus-net]

  loki:
    image: grafana/loki:2.9.3
    command: ["-config.file=/etc/loki/local-config.yaml"]
    volumes:
      - ./deploy/loki-config.yaml:/etc/loki/local-config.yaml:ro
      - loki-data:/loki
    ports: ["3100:3100"]
    networks: [pingerus-net]

  promtail:
    image: grafana/promtail:2.9.3
    command: ["-config.file=/etc/promtail/config.yaml"]
    volumes:
      - ./deploy/promtail.yaml:/etc/promtail/config.yaml:ro
      - /var/lib/docker/containers:/var/lib/docker/containers:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks: [pingerus-net]
    depends_on: { loki: { condition: service_started } }

  prometheus:
    image: prom/prometheus:latest
    command:
      - --config.file=/etc/prometheus/prometheus.yml
      - --storage.tsdb.path=/prometheus
      - --storage.tsdb.retention.time=15d
      - --web.enable-lifecycle
    volumes:
      - ./deploy/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prom-data:/prometheus
    ports: ["9090:9090"]
    networks: [pingerus-net]

  grafana:
    image: grafana/grafana:latest
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - ./deploy/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml:ro
    ports: ["3000:3000"]
    networks: [pingerus-net]
    depends_on:
      - prometheus
      - loki
      - tempo

  migrator:
    build:
      context: .
      dockerfile: cmd/migrator/Dockerfile
    environment:
      DB_DSN: "${DB_DSN}"
    networks: [ pingerus-net ]
    depends_on:
      db:
        condition: service_healthy
    restart: "no"

  api-gateway:
    build:
      context: .
      dockerfile: cmd/api-gateway/Dockerfile
    environment:
      <<: *env_secrets
    networks: [ pingerus-net ]
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      migrator:
        condition: service_completed_successfully
    ports:
      - "8080:8080"
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8080/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  scheduler:
    build:
      context: .
      dockerfile: cmd/scheduler/Dockerfile
    environment:
      <<: *env_secrets
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      migrator:
        condition: service_completed_successfully
    networks: [ pingerus-net ]
    ports:
      - "8082:8082"
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8082/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  ping-worker:
    build:
      context: .
      dockerfile: cmd/ping-worker/Dockerfile
    environment:
      <<: *env_secrets
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      migrator:
        condition: service_completed_successfully
    networks: [ pingerus-net ]
    ports:
      - "8083:8083"
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8083/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped

  email-notifier:
    build:
      context: .
      dockerfile: cmd/email-notifier/Dockerfile
    environment:
      <<: *env_secrets
    depends_on:
      db:
        condition: service_healthy
      kafka:
        condition: service_started
      mailhog:
        condition: service_started
      migrator:
        condition: service_completed_successfully
    networks: [ pingerus-net ]
    ports:
      - "8084:8084"
    healthcheck:
      test: [ "CMD", "wget", "-qO-", "http://localhost:8084/healthz" ]
      interval: 10s
      timeout: 3s
      retries: 10
    restart: unless-stopped
