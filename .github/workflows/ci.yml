name: CI-CD

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: nordcoder-portfolio
  IMAGE_REPO: Pingerus

jobs:
#  lint:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: actions/setup-go@v5
#        with:
#          go-version: "1.21"
#
#      - name: Setup Protoc
#        uses: arduino/setup-protoc@v3
#        with:
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Bootstrap proto & plugins
#        run: |
#          make bootstrap-proto
#          make proto-plugins-install
#
#      - name: Generate protos
#        run: make generate
#
#      - name: golangci-lint
#        uses: golangci/golangci-lint-action@v6
#        with:
#          version: latest
#          args: ./...
#
#  unit:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#
#      - uses: actions/setup-go@v5
#        with:
#          go-version: "1.21"
#
#      - name: Setup Protoc
#        uses: arduino/setup-protoc@v3
#        with:
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Bootstrap proto & plugins
#        run: |
#          make bootstrap-proto
#          make proto-plugins-install
#
#      - name: Generate protos
#        run: make generate
#
#      - name: Unit tests
#        run: go test ./... -race -v
#
#  it-email-notifier:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: "1.21"
#
#      - name: Setup Protoc
#        uses: arduino/setup-protoc@v3
#        with:
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Bootstrap proto & plugins
#        run: |
#          make bootstrap-proto
#          make proto-plugins-install
#
#      - name: Generate protos
#        run: make generate
#
#      - name: Up IT stack + run EN tests
#        shell: bash
#        run: |
#          set -euo pipefail
#          make it-up
#          trap 'docker compose -f docker-compose.it.yml logs > it_logs.txt || true; docker compose -f docker-compose.it.yml down -v || true' EXIT
#          make it-test-en
#      - if: failure()
#        uses: actions/upload-artifact@v4
#        with:
#          name: it-logs-email-notifier
#          path: it_logs.txt
#
#  it-ping-worker:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: "1.21"
#
#      - name: Setup Protoc
#        uses: arduino/setup-protoc@v3
#        with:
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Bootstrap proto & plugins
#        run: |
#          make bootstrap-proto
#          make proto-plugins-install
#
#      - name: Generate protos
#        run: make generate
#
#      - name: Up IT stack + run PW tests
#        shell: bash
#        run: |
#          set -euo pipefail
#          make it-up
#          trap 'docker compose -f docker-compose.it.yml logs > it_logs.txt || true; docker compose -f docker-compose.it.yml down -v || true' EXIT
#          make it-test-pw
#      - if: failure()
#        uses: actions/upload-artifact@v4
#        with:
#          name: it-logs-ping-worker
#          path: it_logs.txt
#
#  it-api-gateway:
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-go@v5
#        with:
#          go-version: "1.21"
#
#      - name: Setup Protoc
#        uses: arduino/setup-protoc@v3
#        with:
#          repo-token: ${{ secrets.GITHUB_TOKEN }}
#
#      - name: Bootstrap proto & plugins
#        run: |
#          make bootstrap-proto
#          make proto-plugins-install
#
#      - name: Generate protos
#        run: make generate
#
#      - name: Up IT stack + run AG tests
#        shell: bash
#        run: |
#          set -euo pipefail
#          make it-up
#          trap 'docker compose -f docker-compose.it.yml logs > it_logs.txt || true; docker compose -f docker-compose.it.yml down -v || true' EXIT
#          make it-test-ag
#      - if: failure()
#        uses: actions/upload-artifact@v4
#        with:
#          name: it-logs-api-gateway
#          path: it_logs.txt

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3

      - name: Compute TAG
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=main" >> $GITHUB_OUTPUT
          fi

      - name: Derive image path (lowercase)
        id: img
        shell: bash
        run: |
          owner_lc="${GITHUB_REPOSITORY_OWNER,,}"
          repo="${GITHUB_REPOSITORY#*/}"
          repo_lc="${repo,,}"
          echo "path=ghcr.io/${owner_lc}/${repo_lc}" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push images (bake)
        uses: docker/bake-action@v5
        with:
          files: ./docker-bake.hcl
          push: true
          set: |
            migrator.tags=${{ steps.img.outputs.path }}/migrator:${{ steps.vars.outputs.tag }}
            api-gateway.tags=${{ steps.img.outputs.path }}/api-gateway:${{ steps.vars.outputs.tag }}
            scheduler.tags=${{ steps.img.outputs.path }}/scheduler:${{ steps.vars.outputs.tag }}
            ping-worker.tags=${{ steps.img.outputs.path }}/ping-worker:${{ steps.vars.outputs.tag }}
            email-notifier.tags=${{ steps.img.outputs.path }}/email-notifier:${{ steps.vars.outputs.tag }}

  deploy-prod:
    if: github.ref_type == 'tag' || github.ref_name == 'refs/heads/main'
    needs: [build-and-push]
    runs-on: ubuntu-latest
    environment: prod
    steps:
      - uses: actions/checkout@v4

      - name: Compute TAG
        id: vars
        shell: bash
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=main" >> $GITHUB_OUTPUT
          fi

      - name: SSH deploy (pull & up -d)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          script: |
            set -e
            export TAG='${{ steps.vars.outputs.tag }}'
            export OWNER='${{ env.IMAGE_OWNER }}'
            export REPO='${{ env.IMAGE_REPO }}'
            docker login ghcr.io -u '${{ github.actor }}' -p '${{ secrets.GITHUB_TOKEN }}'
            /opt/pingerus/deploy.sh "${TAG}"
