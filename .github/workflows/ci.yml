name: CI-CD

on:
  push:
    branches: ["main"]
    tags: ["v*"]
  pull_request:
    branches: ["main"]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  packages: write

defaults:
  run:
    shell: bash

env:
  REGISTRY: ghcr.io
  IMAGE_OWNER: nordcoder-portfolio
  IMAGE_REPO: Pingerus
  GO_VERSION: "1.24"

jobs:
  set-vars:
    runs-on: ubuntu-latest
    outputs:
      gobin_prefix: ${{ steps.vars.outputs.gobin_prefix }}
    steps:
      - uses: actions/checkout@v4
      - id: vars
        run: |
          echo "gobin_prefix=${{ runner.os }}-gobin-${{ hashFiles('**/scripts/bootstrap_proto.sh') }}-${{ hashFiles('**/go.mod') }}-" >> "$GITHUB_OUTPUT"

  bootstrap-cache:
    needs: [set-vars]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go bin — restore
        id: gobin-cache
        uses: actions/cache/restore@v4
        with:
          path: ~/go/bin
          key: ${{ needs.set-vars.outputs.gobin_prefix }}${{ github.run_id }}
          restore-keys: |
            ${{ needs.set-vars.outputs.gobin_prefix }}

      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Bootstrap (install plugins if missing)
        if: steps.gobin-cache.outputs.cache-hit != 'true'
        run: make bootstrap

      - name: Cache Go bin — save
        if: steps.gobin-cache.outputs.cache-hit != 'true'
        uses: actions/cache/save@v4
        with:
          path: ~/go/bin
          key: ${{ needs.set-vars.outputs.gobin_prefix }}${{ github.run_id }}

  gen:
    needs: [bootstrap-cache, set-vars]
    runs-on: ubuntu-latest
    timeout-minutes: 15
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Cache Go bin — restore
        uses: actions/cache/restore@v4
        with:
          path: ~/go/bin
          key: ${{ needs.set-vars.outputs.gobin_prefix }}${{ github.run_id }}
          restore-keys: |
            ${{ needs.set-vars.outputs.gobin_prefix }}

      - uses: arduino/setup-protoc@v3
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Fetch third-party protos
        run: bash scripts/bootstrap_proto.sh

      - name: Generate protos (once)
        run: make -o bootstrap generate

      - name: Upload generated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: gen-artifacts
          path: |
            generated
            docs/spec
          if-no-files-found: error
          retention-days: 7

  lint:
    needs: [gen]
    runs-on: ubuntu-latest
    timeout-minutes: 20
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download generated artifacts
        uses: actions/download-artifact@v4
        with:
          name: gen-artifacts
          path: .

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          args: ./...

  unit:
    needs: [gen]
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download generated artifacts
        uses: actions/download-artifact@v4
        with:
          name: gen-artifacts
          path: .

      - name: Unit tests
        run: make test

  it:
    needs: [gen]
    runs-on: ubuntu-latest
    timeout-minutes: 45
    strategy:
      fail-fast: false
      matrix:
        target: [en, pw, ag]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download generated artifacts
        uses: actions/download-artifact@v4
        with:
          name: gen-artifacts
          path: .

      - name: Run IT (${{ matrix.target }})
        run: make it-test-${{ matrix.target }}

      - if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: it-logs-${{ matrix.target }}
          path: it_logs.txt

  build-and-push:
    needs: [lint, unit, it]
    runs-on: ubuntu-latest
    timeout-minutes: 60
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache: true

      - name: Download generated artifacts
        uses: actions/download-artifact@v4
        with:
          name: gen-artifacts
          path: .

      - name: Setup Buildx
        uses: docker/setup-buildx-action@v3
        with:
          install: true

      - name: Compute TAG
        id: vars
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=main" >> $GITHUB_OUTPUT
          fi

      - name: Derive image path (lowercase)
        id: img
        run: |
          owner_lc="${GITHUB_REPOSITORY_OWNER,,}"
          repo="${GITHUB_REPOSITORY#*/}"
          repo_lc="${repo,,}"
          echo "path=ghcr.io/${owner_lc}/${repo_lc}" >> $GITHUB_OUTPUT

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push images (bake)
        uses: docker/bake-action@v5
        with:
          files: ./docker-bake.hcl
          push: true
          set: |
            *.cache-from=type=gha
            *.cache-to=type=gha,mode=max
            migrator.tags=${{ steps.img.outputs.path }}/migrator:${{ steps.vars.outputs.tag }}
            api-gateway.tags=${{ steps.img.outputs.path }}/api-gateway:${{ steps.vars.outputs.tag }}
            scheduler.tags=${{ steps.img.outputs.path }}/scheduler:${{ steps.vars.outputs.tag }}
            ping-worker.tags=${{ steps.img.outputs.path }}/ping-worker:${{ steps.vars.outputs.tag }}
            email-notifier.tags=${{ steps.img.outputs.path }}/email-notifier:${{ steps.vars.outputs.tag }}
            frontend.tags=${{ steps.img.outputs.path }}/frontend:${{ steps.vars.outputs.tag }}

  deploy-prod:
    if: ${{ github.event_name == 'workflow_dispatch' || github.ref_type == 'tag' || github.ref_name == 'main' }}
    needs: [build-and-push]
    runs-on: ubuntu-latest
    environment: prod
    timeout-minutes: 60
    concurrency:
      group: deploy-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - uses: actions/checkout@v4

      - name: Sync deploy configs
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: "deploy/*"
          target: "/opt/pingerus/deploy"
          strip_components: 1

      - name: Sync compose files
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          source: |
            docker-compose.deploy.yml
          target: "/opt/pingerus"

      - name: Compute TAG
        id: vars
        run: |
          if [[ "${GITHUB_REF_TYPE}" == "tag" ]]; then
            echo "tag=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          else
            echo "tag=main" >> $GITHUB_OUTPUT
          fi

      - name: SSH deploy (call deploy.sh)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_KEY }}
          script_stop: true
          timeout: 60m
          command_timeout: 120m
          script: |
            set -e
            TAG='${{ steps.vars.outputs.tag }}'
            /opt/pingerus/deploy.sh "$TAG"
